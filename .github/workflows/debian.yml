name: Debian packages

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  # Java version to use for the release
  RELEASE_JAVA_VERSION: 8

jobs:
  version:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      deb_version: ${{ steps.version.outputs.deb_version }}
      create_tag: ${{ steps.version.outputs.create_tag }}
      tag_name: ${{ steps.version.outputs.tag_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.RELEASE_JAVA_VERSION }}
          distribution: temurin
          cache: maven

      - name: Parse and set version
        id: version
        run: |
          MVNVER=`mvn help:evaluate -Dexpression=project.version -q -DforceStdout`
          if [ "$GITHUB_REF" == "refs/heads/master" ]; then
            TAG_NAME="v${MVNVER/-SNAPSHOT/}"
            if ! git rev-parse "$TAG_NAME" >/dev/null 2>&1
            then
              echo "Creating tag $TAG_NAME"
              git config --local user.name "$GITHUB_ACTOR via GitHub Action"
              git config --local user.email "action@github.com"
              git tag -a "$TAG_NAME" -m "Tagged automatically by GitHub Action ${{ github.workflow }}"
              echo "::set-output name=create_tag::true"
            else
              echo "Tag: $TAG_NAME already exists"
              echo "::set-output name=create_tag::false"
            fi
            VERSION=`git describe --match "v[0-9\.]*" --long --always`
            VERSION=${VERSION:1}
            DEB_VERSION=${VERSION//-/.}
          else
            echo "Not on master"
            echo "::set-output name=create_tag::false"
            VERSION=${MVNVER}
            DEB_VERSION=${VERSION//-/.}$(date -u +%s%3N)
          fi
          echo "Version: $VERSION"
          echo "::set-output name=version::${VERSION}"
          echo "::set-output name=deb_version::${DEB_VERSION}"
          echo "::set-output name=tag_name::${TAG_NAME}"

      - name: Compile Java for JNI headers
        run: mvn -B compile

      - name: Upload JNI headers
        uses: actions/upload-artifact@v2
        with:
          name: jni_headers
          path: target/native

  deb:
    runs-on: ubuntu-latest
    needs: version
    strategy:
      fail-fast: false
      matrix:
        dist:
          - { vendor: ubuntu, dist: bionic }
          - { vendor: ubuntu, dist: focal }
          - { vendor: ubuntu, dist: hirsute }
          - { vendor: ubuntu, dist: impish }
          - { vendor: ubuntu, dist: jammy }
          - { vendor: debian, dist: buster }
          - { vendor: debian, dist: bullseye }
        arch:
          - amd64
          - arm64
          # pbuilder fails on ca-certificates-java
          #- ppc64el
        include: [
          { dist: { vendor: ubuntu, dist: bionic }, arch: i386 },
          { dist: { vendor: debian, dist: buster }, arch: i386 },
          { dist: { vendor: debian, dist: bullseye }, arch: i386 },
        ]

    name: ${{ matrix.dist.dist }} ${{ matrix.arch }}

    env:
      UBUNTUTOOLS_UBUNTU_MIRROR: http://azure.archive.ubuntu.com/ubuntu
      UBUNTUTOOLS_DEBIAN_MIRROR: http://deb.debian.org/debian

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - name: Install Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.RELEASE_JAVA_VERSION }}
          distribution: temurin
          cache: maven

      - name: Set Maven package version
        run: |
          mvn -B versions:set -DnewVersion=${{ needs.version.outputs.version }} -DgenerateBackupPoms=false

      - name: Install dev packages
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update -y
          # dev-tools from backports because https://bugs.launchpad.net/ubuntu/+source/ubuntu-dev-tools/+bug/1916633
          sudo apt-get install -y \
            ubuntu-dev-tools/$(lsb_release -c -s)-backports \
            python3-ubuntutools/$(lsb_release -c -s)-backports \
            binutils \
            pbuilder \
            debootstrap \
            debian-archive-keyring \
            git-buildpackage

      - name: Install additional dev packages
        if: ${{ matrix.arch == 'arm64' || matrix.arch == 'ppc64el' }}
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # https://bugs.launchpad.net/ubuntu/+source/qemu/+bug/1895456
          # https://gitlab.com/qemu-project/qemu/-/issues/588
          sudo add-apt-repository ppa:canonical-server/server-backports
          sudo apt-get update -y
          sudo apt-get install -y qemu-user-static
          # see https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=904336 and https://bugs.launchpad.net/qemu/+bug/1594394
          echo PBUILDERSATISFYDEPENDSCMD=/usr/lib/pbuilder/pbuilder-satisfydepends-apt >> ~/.pbuilderrc

      - name: Cache pbuilder archive
        uses: actions/cache@v2
        id: deb_cache
        with:
          path: ~/pbuilder/${{ matrix.dist.dist }}*-base.tgz
          key: pbuilder-${{ matrix.dist.dist }}-${{ matrix.arch }}

      - name: Create or update pbuilder base
        id: pbuilder_create
        run: |
          if [ "${{ steps.deb_cache.outputs.cache-hit }}" != "true" ]; then
            pbuilder-dist ${{ matrix.dist.dist }} ${{ matrix.arch }} create
          else
            pbuilder-dist ${{ matrix.dist.dist }} ${{ matrix.arch }} update
          fi;

      - name: Get JNI headers
        uses: actions/download-artifact@v2
        with:
          name: jni_headers
          path: target/native

      - name: Build deb archive
        env:
          GPG_PASSPHRASE: "${{ secrets.GPG_PW }}"
        run: |
          pbuilder_args=()
          if [[ "${{ matrix.dist.dist }}" != "$(lsb_release -c -s)" || "${{ matrix.arch }}" != "amd64" ]]; then
            pbuilder_args+=(--binary-arch)
          fi;
          cat <(echo -e "${{ secrets.GPG_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
          SINCE=$(git describe --match "v[0-9\.]*" --abbrev=0)
          gbp dch \
            --ignore-branch \
            --since $SINCE \
            --meta \
            --release \
            --distribution=${{ matrix.dist.dist }} \
            --force-distribution \
            --spawn-editor=never \
            --new-version=${{ needs.version.outputs.deb_version }}~${{ matrix.dist.dist }}
          dpkg-source -I.git -b .
          pbuilder-dist ${{ matrix.dist.dist }} ${{ matrix.arch }} build \
            --source-only-changes \
            ${pbuilder_args[@]} \
            --buildresult ~/pbuilder/${{ matrix.dist.vendor }}-${{ matrix.dist.dist }}-${{ matrix.arch }}_result \
            ../libjitsi_*.dsc
          cd ~/pbuilder/${{ matrix.dist.vendor }}-${{ matrix.dist.dist }}-${{ matrix.arch }}_result
          debsign -S -edev+maven@jitsi.org *_source.changes --re-sign -p${{ github.workspace }}/.github/workflows/gpg-wrap.sh

      - name: Upload package as artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.dist.vendor }}-${{ matrix.dist.dist }}-${{ matrix.arch }}
          path: ~/pbuilder/${{ matrix.dist.vendor }}-${{ matrix.dist.dist }}-${{ matrix.arch }}_result/*

  release:
    if: github.ref == 'refs/heads/master'
    needs: deb
    runs-on: ubuntu-latest
    steps:
      - name: Set version and prepare packages
        id: version
        run: |
          sudo -H pip3 install --upgrade setuptools
          sudo -H pip3 install --upgrade wheel
          sudo -H pip3 install --upgrade cloudsmith-cli
          sudo apt-get -y install dput

      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          path: target

      - name: Push packages to ppa and Cloudsmith
        env:
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
        run: |
          REPO_NAME="jitsi-desktop-snapshots"
          cd target
          for dist in */ ; do
            if [[ "$dist" =~ ^(debian|ubuntu)- ]]; then
              IFS='-' read -r -a triplet <<< "${dist/\//}"
              # source only upload to ppa
              if [[ "${triplet[0]}" == "ubuntu" && "${triplet[2]}" == "amd64" ]]; then
                echo "Upload ${dist}*_source.changes to ppa:jitsi/$REPO_NAME"
                dput ppa:jitsi/$REPO_NAME ${dist}*_source.changes
              fi;
              # upload all architecture-specific binaries to cloudsmith, but only one java-all
              echo "Upload ${dist}liblibjitsi-jni_*.deb to Cloudsmith"
              cloudsmith push deb jitsi/$REPO_NAME/${triplet[0]}/${triplet[1]} ${dist}liblibjitsi-jni_*.deb
            fi;
          done;
